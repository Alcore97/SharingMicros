"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newPiral = exports.newPiralDefaults = void 0;
const path_1 = require("path");
const types_1 = require("../types");
const common_1 = require("../common");
exports.newPiralDefaults = {
    app: './src/index.html',
    registry: common_1.defaultRegistry,
    framework: 'piral',
    target: '.',
    version: common_1.cliVersion,
    forceOverwrite: common_1.ForceOverwrite.no,
    language: common_1.SourceLanguage.ts,
    install: true,
    template: 'default',
    logLevel: types_1.LogLevels.info,
    npmClient: undefined,
    bundlerName: 'none',
    variables: {},
};
function newPiral(baseDir = process.cwd(), options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { app = exports.newPiralDefaults.app, registry = exports.newPiralDefaults.registry, framework = exports.newPiralDefaults.framework, target = exports.newPiralDefaults.target, version = exports.newPiralDefaults.version, forceOverwrite = exports.newPiralDefaults.forceOverwrite, language = exports.newPiralDefaults.language, install = exports.newPiralDefaults.install, template = exports.newPiralDefaults.template, logLevel = exports.newPiralDefaults.logLevel, bundlerName = exports.newPiralDefaults.bundlerName, variables = exports.newPiralDefaults.variables, } = options;
        common_1.setLogLevel(logLevel);
        common_1.progress('Preparing source and target ...');
        const root = path_1.resolve(baseDir, target);
        const success = yield common_1.createDirectory(root);
        if (success) {
            const npmClient = yield common_1.determineNpmClient(root, options.npmClient);
            const packageRef = common_1.combinePackageRef(framework, version, 'registry');
            common_1.progress(`Creating a new Piral instance in %s ...`, root);
            yield common_1.createFileIfNotExists(root, 'package.json', JSON.stringify({
                name: path_1.basename(root),
                version: '1.0.0',
                description: '',
                keywords: ['piral'],
                dependencies: {},
                scripts: {},
            }, undefined, 2));
            if (registry !== exports.newPiralDefaults.registry) {
                common_1.progress(`Setting up NPM registry (%s) ...`, registry);
                yield common_1.createFileIfNotExists(root, '.npmrc', `registry=${registry}
always-auth=true`, forceOverwrite);
            }
            yield common_1.updateExistingJson(root, 'package.json', common_1.getPiralPackage(app, language, version, framework, bundlerName));
            common_1.progress(`Installing NPM package ${packageRef} ...`);
            yield common_1.installPackage(npmClient, packageRef, root);
            common_1.progress(`Taking care of templating ...`);
            yield common_1.scaffoldPiralSourceFiles(template, registry, language, root, app, framework, forceOverwrite, variables);
            if (install) {
                common_1.progress(`Installing dependencies ...`);
                yield common_1.installDependencies(npmClient, root);
            }
            common_1.logDone(`Piral instance scaffolded successfully!`);
        }
        else {
            common_1.fail('cannotCreateDirectory_0044');
        }
    });
}
exports.newPiral = newPiral;
//# sourceMappingURL=new-piral.js.map