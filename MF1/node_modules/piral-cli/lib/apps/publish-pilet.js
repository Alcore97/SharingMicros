"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.publishPilet = exports.publishPiletDefaults = void 0;
const path_1 = require("path");
const build_pilet_1 = require("./build-pilet");
const types_1 = require("../types");
const common_1 = require("../common");
exports.publishPiletDefaults = {
    source: '*.tgz',
    url: undefined,
    apiKey: undefined,
    fresh: false,
    cert: undefined,
    logLevel: types_1.LogLevels.info,
    schemaVersion: 'v1',
    from: 'local',
    fields: {},
};
function getFiles(baseDir, source, from, fresh, schemaVersion, ca) {
    return __awaiter(this, void 0, void 0, function* () {
        if (fresh) {
            common_1.log('generalDebug_0003', 'Detected "--fresh". Trying to resolve the package.json.');
            const details = require(path_1.join(baseDir, 'package.json'));
            common_1.progress('Triggering pilet build ...');
            yield build_pilet_1.buildPilet(baseDir, {
                target: details.main,
                fresh,
                schemaVersion,
            });
            common_1.log('generalDebug_0003', 'Successfully built.');
            common_1.progress('Triggering pilet pack ...');
            const file = yield common_1.createPiletPackage(baseDir, '.', '.');
            common_1.log('generalDebug_0003', 'Successfully packed.');
            return [file];
        }
        else {
            common_1.log('generalDebug_0003', `Did not find fresh flag. Trying to match from "${from}".`);
            switch (from) {
                case 'local':
                    common_1.log('generalDebug_0003', `Matching files using "${source}".`);
                    return yield common_1.matchFiles(baseDir, source);
                case 'remote':
                    common_1.log('generalDebug_0003', `Download file from "${source}".`);
                    return yield common_1.downloadFile(source, ca);
                case 'npm':
                    common_1.log('generalDebug_0003', `View NPM package "${source}".`);
                    const url = yield common_1.findTarball(source);
                    common_1.log('generalDebug_0003', `Download file from "${url}".`);
                    return yield common_1.downloadFile(url, ca);
            }
        }
    });
}
function publishPilet(baseDir = process.cwd(), options = {}) {
    var _a, _b, _c, _d, _e;
    return __awaiter(this, void 0, void 0, function* () {
        const { source = exports.publishPiletDefaults.source, url = (_a = common_1.config.url) !== null && _a !== void 0 ? _a : exports.publishPiletDefaults.url, apiKey = (_d = (_c = (_b = common_1.config.apiKeys) === null || _b === void 0 ? void 0 : _b[url]) !== null && _c !== void 0 ? _c : common_1.config.apiKey) !== null && _d !== void 0 ? _d : exports.publishPiletDefaults.apiKey, fresh = exports.publishPiletDefaults.fresh, logLevel = exports.publishPiletDefaults.logLevel, from = exports.publishPiletDefaults.from, schemaVersion = exports.publishPiletDefaults.schemaVersion, cert = (_e = common_1.config.cert) !== null && _e !== void 0 ? _e : exports.publishPiletDefaults.cert, fields = exports.publishPiletDefaults.fields, } = options;
        common_1.setLogLevel(logLevel);
        common_1.progress('Reading configuration ...');
        if (!url) {
            common_1.fail('missingPiletFeedUrl_0060');
        }
        common_1.log('generalDebug_0003', 'Checking if certificate exists.');
        let ca = undefined;
        if (yield common_1.checkExists(cert)) {
            const dir = path_1.dirname(cert);
            const file = path_1.basename(cert);
            common_1.log('generalDebug_0003', `Reading certificate file "${file}" from "${dir}".`);
            ca = yield common_1.readBinary(dir, file);
        }
        common_1.log('generalDebug_0003', 'Getting the tgz files ...');
        const files = yield getFiles(baseDir, source, from, fresh, schemaVersion, ca);
        const successfulUploads = [];
        common_1.log('generalDebug_0003', 'Received available tgz files.');
        if (files.length === 0) {
            common_1.fail('missingPiletTarball_0061', source);
        }
        common_1.log('generalInfo_0000', `Using feed service "${url}".`);
        for (const file of files) {
            common_1.log('generalDebug_0003', 'Reading the file for upload ...');
            const fileName = path_1.relative(baseDir, file);
            const content = yield common_1.readBinary(baseDir, fileName);
            if (content) {
                common_1.progress(`Publishing "%s" ...`, file, url);
                const result = yield common_1.postFile(url, apiKey, content, fields, ca);
                if (result.success) {
                    successfulUploads.push(file);
                    if (result.response) {
                        common_1.log('httpPostResponse_0067', result);
                    }
                    common_1.progress(`Published successfully!`);
                }
                else if (result.status === 402) {
                    common_1.log('failedToUploadPayment_0161', result.response);
                }
                else if (result.status === 409) {
                    common_1.log('failedToUploadVersion_0162', result.response);
                }
                else if (result.status === 413) {
                    common_1.log('failedToUploadSize_0163', result.response);
                }
                else {
                    common_1.log('failedToUpload_0062', fileName);
                }
            }
            else {
                common_1.log('failedToRead_0063', fileName);
            }
            common_1.log('generalDebug_0003', 'Finished uploading the file.');
        }
        if (files.length === successfulUploads.length) {
            common_1.logDone(`Pilet(s) published successfully!`);
        }
        else {
            common_1.fail('failedUploading_0064');
        }
    });
}
exports.publishPilet = publishPilet;
//# sourceMappingURL=publish-pilet.js.map