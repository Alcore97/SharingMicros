"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPiralDeclaration = exports.createPiletDeclaration = void 0;
const dets_1 = require("dets");
const path_1 = require("path");
const log_1 = require("./log");
const npm_1 = require("./npm");
const package_1 = require("./package");
const constants_1 = require("./constants");
const io_1 = require("./io");
function findPiralBaseApi(root) {
    var _a;
    try {
        return (_a = require
            .resolve(constants_1.piralBaseRoot, {
            paths: [root],
        })) === null || _a === void 0 ? void 0 : _a.replace(/\.js$/, '.d.ts');
    }
    catch (_b) {
        return undefined;
    }
}
function findDeclaredTypings(root) {
    try {
        const { typings } = require(path_1.resolve(root, 'package.json'));
        if (typings) {
            return [path_1.resolve(root, typings)];
        }
    }
    catch (_a) { }
    return [];
}
function getAllFiles(entryModules) {
    return __awaiter(this, void 0, void 0, function* () {
        const files = [];
        const pattern = '**/+(*.ts|*.tsx|*.js|*.jsx)';
        const allFiles = yield Promise.all(entryModules.map((m) => io_1.matchFiles(path_1.dirname(m), pattern)));
        for (const found of allFiles) {
            files.push(...found.filter((file) => !files.includes(file)));
        }
        return files;
    });
}
function getEntryModules(entryFiles) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!constants_1.entryModuleExtensions.includes(path_1.extname(entryFiles).toLowerCase())) {
            const appFile = yield io_1.readText(path_1.dirname(entryFiles), path_1.basename(entryFiles));
            const entryModules = yield io_1.getEntryFiles(appFile, path_1.dirname(entryFiles));
            return entryModules;
        }
        return [entryFiles];
    });
}
function createLogger() {
    return {
        error(message) {
            throw new Error(message);
        },
        info(message) {
            log_1.logInfo(message);
        },
        verbose(message) {
            log_1.logVerbose(message);
        },
        warn(message) {
            log_1.logWarn(message);
        },
    };
}
function createDeclarationFile(options, source, target, forceOverwrite) {
    return __awaiter(this, void 0, void 0, function* () {
        log_1.progress('Bundling declaration file ...');
        try {
            const result = dets_1.generateDeclaration(options);
            log_1.progress('Writing declaration file ...');
            yield io_1.createFileIfNotExists(target, 'index.d.ts', result, forceOverwrite);
        }
        catch (ex) {
            log_1.log('declarationCouldNotBeGenerated_0076', source, ex);
        }
    });
}
function createPiletDeclaration(name, root, entry, allowedImports, target, forceOverwrite, logLevel) {
    return __awaiter(this, void 0, void 0, function* () {
        const files = yield getAllFiles([entry]);
        const types = findDeclaredTypings(root);
        const options = {
            name,
            root,
            files,
            types: [...types, ...files],
            plugins: [dets_1.createExcludePlugin([name])],
            apis: [],
            imports: allowedImports,
            logLevel,
            logger: createLogger(),
        };
        return yield createDeclarationFile(options, root, target, forceOverwrite);
    });
}
exports.createPiletDeclaration = createPiletDeclaration;
function createPiralDeclaration(baseDir, entry, target, forceOverwrite, logLevel) {
    return __awaiter(this, void 0, void 0, function* () {
        log_1.progress('Reading configuration ...');
        const entryFiles = yield package_1.retrievePiralRoot(baseDir, entry);
        const { name, root, externals } = yield package_1.retrievePiletsInfo(entryFiles);
        const allowedImports = npm_1.makeExternals(externals);
        const entryModules = yield getEntryModules(entryFiles);
        const files = yield getAllFiles(entryModules);
        const options = {
            name,
            root,
            files,
            types: findDeclaredTypings(root),
            apis: [
                {
                    file: findPiralBaseApi(root),
                    name: 'PiletApi',
                },
            ],
            imports: allowedImports,
            logLevel,
            logger: createLogger(),
        };
        return yield createDeclarationFile(options, baseDir, target, forceOverwrite);
    });
}
exports.createPiralDeclaration = createPiralDeclaration;
//# sourceMappingURL=declaration.js.map