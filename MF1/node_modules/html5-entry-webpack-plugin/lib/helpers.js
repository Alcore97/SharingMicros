"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setEntries = exports.replaceEntries = exports.getTemplates = exports.extractParts = exports.isLocal = void 0;
function isLocal(path) {
    if (path) {
        if (path.startsWith(':')) {
            return false;
        }
        else if (path.startsWith('http:')) {
            return false;
        }
        else if (path.startsWith('https:')) {
            return false;
        }
        else if (path.startsWith('data:')) {
            return false;
        }
        return true;
    }
    return false;
}
exports.isLocal = isLocal;
function extractParts(content) {
    var sheets = content('link[href][rel=stylesheet]')
        .filter(function (_, e) { return isLocal(e.attribs.href); })
        .remove()
        .toArray();
    var scripts = content('script[src]')
        .filter(function (_, e) { return isLocal(e.attribs.src); })
        .remove()
        .toArray();
    var files = [];
    for (var _i = 0, sheets_1 = sheets; _i < sheets_1.length; _i++) {
        var sheet = sheets_1[_i];
        files.push(sheet.attribs.href);
    }
    for (var _a = 0, scripts_1 = scripts; _a < scripts_1.length; _a++) {
        var script = scripts_1[_a];
        files.push(script.attribs.src);
    }
    return files;
}
exports.extractParts = extractParts;
function getTemplates(entry) {
    var templates = [];
    if (typeof entry === 'string') {
        if (entry.endsWith('.html')) {
            templates.push(entry);
        }
    }
    else if (Array.isArray(entry)) {
        templates.push.apply(templates, entry.filter(function (e) { return e.endsWith('.html'); }));
    }
    else if (typeof entry !== 'function') {
        Object.keys(entry).forEach(function (key) {
            var value = entry[key];
            templates.push.apply(templates, getTemplates(value));
        });
    }
    return templates;
}
exports.getTemplates = getTemplates;
function replaceEntries(existingEntries, oldEntry, newEntries) {
    for (var i = 0; i < existingEntries.length; i++) {
        if (existingEntries[i] === oldEntry) {
            existingEntries.splice.apply(existingEntries, __spreadArrays([i, 1], newEntries));
            break;
        }
    }
}
exports.replaceEntries = replaceEntries;
function setEntries(config, template, entries) {
    if (typeof config.entry === 'string') {
        config.entry = entries;
    }
    else if (Array.isArray(config.entry)) {
        replaceEntries(config.entry, template, entries);
    }
    else if (typeof config.entry !== 'function') {
        Object.keys(config.entry).forEach(function (key) {
            var value = config.entry[key];
            if (value === template) {
                config.entry[key] = entries;
            }
            else if (Array.isArray(value)) {
                replaceEntries(value, template, entries);
            }
        });
    }
}
exports.setEntries = setEntries;
//# sourceMappingURL=helpers.js.map