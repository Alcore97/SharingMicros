"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.debugPiral = exports.debugPiralDefaults = void 0;
const path_1 = require("path");
const kras_1 = require("kras");
const bundler_1 = require("../bundler");
const types_1 = require("../types");
const common_1 = require("../common");
exports.debugPiralDefaults = {
    entry: './',
    port: 1234,
    publicUrl: '/',
    logLevel: types_1.LogLevels.info,
    open: false,
    hmr: true,
    optimizeModules: false,
};
const injectorName = path_1.resolve(__dirname, '../injectors/piral.js');
function debugPiral(baseDir = process.cwd(), options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { entry = exports.debugPiralDefaults.entry, port = exports.debugPiralDefaults.port, open = exports.debugPiralDefaults.open, hmr = exports.debugPiralDefaults.hmr, publicUrl = exports.debugPiralDefaults.publicUrl, logLevel = exports.debugPiralDefaults.logLevel, optimizeModules = exports.debugPiralDefaults.optimizeModules, _ = {}, bundlerName, } = options;
        common_1.setLogLevel(logLevel);
        common_1.progress('Reading configuration ...');
        const entryFiles = yield common_1.retrievePiralRoot(baseDir, entry);
        const { externals, name, root, ignored } = yield common_1.retrievePiletsInfo(entryFiles);
        const krasConfig = kras_1.readKrasConfig({ port }, kras_1.krasrc);
        yield common_1.checkCliCompatibility(root);
        if (krasConfig.directory === undefined) {
            krasConfig.directory = path_1.join(path_1.dirname(entryFiles), 'mocks');
        }
        if (krasConfig.ssl === undefined) {
            krasConfig.ssl = undefined;
        }
        if (krasConfig.map === undefined) {
            krasConfig.map = {};
        }
        if (krasConfig.api === undefined) {
            krasConfig.api = '/manage-mock-server';
        }
        if (krasConfig.injectors === undefined) {
            krasConfig.injectors = kras_1.defaultConfig.injectors;
        }
        const bundler = yield bundler_1.callPiralDebug({
            root,
            piral: name,
            optimizeModules,
            hmr,
            externals,
            publicUrl,
            entryFiles,
            logLevel,
            ignored,
            _,
        }, bundlerName);
        const injectorConfig = {
            active: true,
            handle: ['/'],
            bundler,
        };
        krasConfig.map['/'] = '';
        krasConfig.injectors = common_1.reorderInjectors(injectorName, injectorConfig, krasConfig.injectors);
        common_1.log('generalVerbose_0004', `Using kras with configuration: ${JSON.stringify(krasConfig, undefined, 2)}`);
        const krasServer = kras_1.buildKrasWithCli(krasConfig);
        krasServer.removeAllListeners('open');
        krasServer.on('open', common_1.notifyServerOnline([bundler], krasConfig.api));
        yield krasServer.start();
        common_1.openBrowser(open, port);
        yield new Promise((resolve) => krasServer.on('close', resolve));
    });
}
exports.debugPiral = debugPiral;
//# sourceMappingURL=debug-piral.js.map