"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildPilet = exports.buildPiletDefaults = void 0;
const path_1 = require("path");
const types_1 = require("../types");
const bundler_1 = require("../bundler");
const common_1 = require("../common");
exports.buildPiletDefaults = {
    entry: './src/index',
    target: './dist/index.js',
    minify: true,
    logLevel: types_1.LogLevels.info,
    fresh: false,
    sourceMaps: true,
    contentHash: true,
    optimizeModules: false,
    schemaVersion: 'v1',
    declaration: true,
};
function buildPilet(baseDir = process.cwd(), options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { entry = exports.buildPiletDefaults.entry, target = exports.buildPiletDefaults.target, minify = exports.buildPiletDefaults.minify, sourceMaps = exports.buildPiletDefaults.sourceMaps, contentHash = exports.buildPiletDefaults.contentHash, logLevel = exports.buildPiletDefaults.logLevel, fresh = exports.buildPiletDefaults.fresh, optimizeModules = exports.buildPiletDefaults.optimizeModules, schemaVersion = exports.buildPiletDefaults.schemaVersion, declaration = exports.buildPiletDefaults.declaration, _ = {}, bundlerName, app, } = options;
        common_1.setLogLevel(logLevel);
        common_1.progress('Reading configuration ...');
        const allEntries = yield common_1.matchAny(baseDir, [entry]);
        if (allEntries.length === 0) {
            common_1.fail('entryFileMissing_0077');
        }
        const entryModule = allEntries.shift();
        const targetDir = path_1.dirname(entryModule);
        const { peerDependencies, peerModules, root, appPackage, piletPackage, ignored } = yield common_1.retrievePiletData(targetDir, app);
        const externals = [...Object.keys(peerDependencies), ...peerModules];
        const outDir = path_1.dirname(path_1.resolve(baseDir, target));
        if (fresh) {
            common_1.progress('Removing output directory ...');
            yield common_1.removeDirectory(outDir);
        }
        common_1.logInfo('Bundle pilet ...');
        yield bundler_1.callPiletBuild({
            root,
            piral: appPackage.name,
            optimizeModules,
            sourceMaps,
            contentHash,
            minify,
            externals,
            targetDir,
            outFile: path_1.basename(target),
            outDir,
            entryModule: `./${path_1.relative(root, entryModule)}`,
            logLevel,
            version: schemaVersion,
            ignored,
            _,
        }, bundlerName);
        if (declaration) {
            yield common_1.createPiletDeclaration(piletPackage.name, root, entryModule, externals, outDir, common_1.ForceOverwrite.yes, logLevel);
        }
        common_1.logDone('Pilet built successfully!');
    });
}
exports.buildPilet = buildPilet;
//# sourceMappingURL=build-pilet.js.map