"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMenuApi = void 0;
var tslib_1 = require("tslib");
var actions = require("./actions");
var piral_core_1 = require("piral-core");
var default_1 = require("./default");
function getSettings(defaultSettings, customSettings) {
    if (customSettings === void 0) { customSettings = {}; }
    return tslib_1.__assign(tslib_1.__assign({ type: 'general' }, defaultSettings), customSettings);
}
function getMenuItems(items, defaultSettings) {
    var menuItems = {};
    var i = 0;
    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
        var _a = items_1[_i], component = _a.component, settings = _a.settings;
        menuItems["global-" + i++] = {
            pilet: undefined,
            component: component,
            settings: getSettings(defaultSettings, settings),
        };
    }
    return menuItems;
}
/**
 * Creates new Pilet API extensions for integration of menu items.
 */
function createMenuApi(config) {
    if (config === void 0) { config = {}; }
    var _a = config.items, items = _a === void 0 ? [] : _a, _b = config.defaultSettings, defaultSettings = _b === void 0 ? {} : _b;
    return function (context) {
        context.defineActions(actions);
        context.dispatch(function (state) { return (tslib_1.__assign(tslib_1.__assign({}, state), { components: tslib_1.__assign({ MenuContainer: default_1.DefaultContainer, MenuItem: default_1.DefaultItem }, state.components), registry: tslib_1.__assign(tslib_1.__assign({}, state.registry), { menuItems: getMenuItems(items, defaultSettings) }) })); });
        return function (api, target) {
            var pilet = target.name;
            var next = 0;
            return {
                registerMenu: function (name, arg, settings) {
                    if (typeof name !== 'string') {
                        settings = arg;
                        arg = name;
                        name = next++;
                    }
                    var id = piral_core_1.buildName(pilet, name);
                    context.registerMenuItem(id, {
                        pilet: pilet,
                        component: piral_core_1.withApi(context, arg, api, 'menu'),
                        settings: getSettings(defaultSettings, settings),
                    });
                    return function () { return api.unregisterMenu(name); };
                },
                unregisterMenu: function (name) {
                    var id = piral_core_1.buildName(pilet, name);
                    context.unregisterMenuItem(id);
                },
            };
        };
    };
}
exports.createMenuApi = createMenuApi;
//# sourceMappingURL=create.js.map