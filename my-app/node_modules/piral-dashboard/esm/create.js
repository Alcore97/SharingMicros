import { __assign } from "tslib";
import * as actions from './actions';
import { buildName, withApi } from 'piral-core';
import { DefaultTile, DefaultContainer } from './default';
function getPreferences(defaultPreferences, customPreferences) {
    if (customPreferences === void 0) { customPreferences = {}; }
    return __assign(__assign({}, defaultPreferences), customPreferences);
}
function getTiles(items, defaultPreferences) {
    var tiles = {};
    var i = 0;
    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
        var _a = items_1[_i], component = _a.component, preferences = _a.preferences;
        tiles["global-" + i++] = {
            pilet: undefined,
            component: component,
            preferences: getPreferences(defaultPreferences, preferences),
        };
    }
    return tiles;
}
/**
 * Creates the Pilet API extension for activating dashboard support.
 */
export function createDashboardApi(config) {
    if (config === void 0) { config = {}; }
    var _a = config.tiles, tiles = _a === void 0 ? [] : _a, _b = config.defaultPreferences, defaultPreferences = _b === void 0 ? {} : _b;
    return function (context) {
        context.defineActions(actions);
        context.dispatch(function (state) { return (__assign(__assign({}, state), { components: __assign({ DashboardTile: DefaultTile, DashboardContainer: DefaultContainer }, state.components), registry: __assign(__assign({}, state.registry), { tiles: getTiles(tiles, defaultPreferences) }) })); });
        return function (api, target) {
            var pilet = target.name;
            var next = 0;
            return {
                registerTile: function (name, arg, preferences) {
                    if (typeof name !== 'string') {
                        preferences = arg;
                        arg = name;
                        name = next++;
                    }
                    var id = buildName(pilet, name);
                    context.registerTile(id, {
                        pilet: pilet,
                        component: withApi(context, arg, api, 'tile'),
                        preferences: getPreferences(defaultPreferences, preferences),
                    });
                    return function () { return api.unregisterTile(name); };
                },
                unregisterTile: function (name) {
                    var id = buildName(pilet, name);
                    context.unregisterTile(id);
                },
            };
        };
    };
}
//# sourceMappingURL=create.js.map