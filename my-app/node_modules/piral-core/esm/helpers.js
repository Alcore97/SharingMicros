import { __assign } from "tslib";
import { addChangeHandler } from '@dbeining/react-atom';
import { getDependencyResolver, getDefaultLoader, extendLoader, } from 'piral-base';
import { globalDependencies, getLocalDependencies } from './modules';
/**
 * Creates a dependency getter that sets the shared dependencies explicitly.
 * Overrides the potentially set shared dependencies from the Piral CLI, but
 * keeps all global dependencies such as react, react-dom, ...
 * @param sharedDependencies The shared dependencies to declare.
 */
export function setSharedDependencies(sharedDependencies) {
    var dependencies = __assign(__assign({}, globalDependencies), sharedDependencies);
    return function () { return dependencies; };
}
/**
 * Creates a dependency getter that extends the shared dependencies with additional dependencies.
 * @param additionalDependencies The additional dependencies to declare.
 */
export function extendSharedDependencies(additionalDependencies) {
    var dependencies = __assign(__assign({}, getLocalDependencies()), additionalDependencies);
    return function () { return dependencies; };
}
export function createPiletOptions(_a) {
    var context = _a.context, createApi = _a.createApi, availablePilets = _a.availablePilets, fetchDependency = _a.fetchDependency, getDependencies = _a.getDependencies, loaderConfig = _a.loaderConfig, loadPilet = _a.loadPilet, strategy = _a.strategy, loaders = _a.loaders, requestPilets = _a.requestPilets;
    getDependencies = getDependencyResolver(globalDependencies, getDependencies);
    loadPilet = extendLoader(loadPilet !== null && loadPilet !== void 0 ? loadPilet : getDefaultLoader(getDependencies, fetchDependency, loaderConfig), loaders);
    // if we build the debug version of piral (debug and emulator build)
    if (process.env.DEBUG_PIRAL) {
        var installPiralDebug = require('piral-debug-utils').installPiralDebug;
        installPiralDebug({
            context: context,
            createApi: createApi,
            getDependencies: getDependencies,
            loadPilet: loadPilet,
            requestPilets: requestPilets,
            onChange: function (cb) {
                addChangeHandler(context.state, 'debugging', function (_a) {
                    var previous = _a.previous, current = _a.current;
                    cb(previous, current);
                });
            },
        });
    }
    if (process.env.DEBUG_PILET) {
        var withEmulatorPilets = require('piral-debug-utils').withEmulatorPilets;
        requestPilets = withEmulatorPilets(requestPilets, {
            inject: context.injectPilet,
            createApi: createApi,
            loadPilet: loadPilet,
        });
    }
    return {
        config: loaderConfig,
        strategy: strategy,
        loadPilet: loadPilet,
        createApi: createApi,
        getDependencies: getDependencies,
        pilets: availablePilets,
        fetchPilets: requestPilets,
        dependencies: globalDependencies,
    };
}
//# sourceMappingURL=helpers.js.map