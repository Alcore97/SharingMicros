import { useState, useEffect } from 'react';
/**
 * Hook for introducing a complete local loading state for a promise.
 * @param promise The callback for the promise to wait for.
 */
export function usePromise(promise) {
    var _a = useState({
        loading: true,
        data: undefined,
        error: undefined,
    }), result = _a[0], setResult = _a[1];
    useEffect(function () {
        var cancelled = false;
        promise().then(function (data) { return !cancelled && setResult({ data: data, error: undefined, loading: false }); }, function (error) { return !cancelled && setResult({ data: undefined, error: error, loading: false }); });
        return function () {
            cancelled = true;
        };
    }, []);
    return result;
}
//# sourceMappingURL=promise.js.map