import { __assign } from "tslib";
import { appendItem, excludeOn, withKey, withoutKey } from '../utils';
export function registerPage(ctx, name, value) {
    ctx.dispatch(function (state) { return (__assign(__assign({}, state), { registry: __assign(__assign({}, state.registry), { pages: withKey(state.registry.pages, name, value) }) })); });
}
export function unregisterPage(ctx, name) {
    ctx.dispatch(function (state) { return (__assign(__assign({}, state), { registry: __assign(__assign({}, state.registry), { pages: withoutKey(state.registry.pages, name) }) })); });
}
export function registerExtension(ctx, name, value) {
    ctx.dispatch(function (state) { return (__assign(__assign({}, state), { registry: __assign(__assign({}, state.registry), { extensions: withKey(state.registry.extensions, name, appendItem(state.registry.extensions[name], value)) }) })); });
}
export function unregisterExtension(ctx, name, reference) {
    ctx.dispatch(function (state) { return (__assign(__assign({}, state), { registry: __assign(__assign({}, state.registry), { extensions: withKey(state.registry.extensions, name, excludeOn(state.registry.extensions[name], function (m) { return m.reference === reference; })) }) })); });
}
//# sourceMappingURL=components.js.map