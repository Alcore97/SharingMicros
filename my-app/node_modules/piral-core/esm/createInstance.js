import { __assign } from 'tslib';
import { blazingStrategy, standardStrategy, createListener, isfunc } from 'piral-base';
import { getLocalDependencies, defaultApiFactory, defaultModuleRequester } from './modules';
import { createGlobalState, createActions, includeActions } from './state';
import { createPiletOptions } from './helpers';
/**
 * Creates a new PiralInstance component, which can be used for
 * bootstrapping the application easily.
 *
 * @example
```jsx
const instance = createInstance({
  requestPilets() {
    return fetch(...);
  },
});

const app = (
  <Piral instance={instance}>
    <Define name="Layout" component={MyLayout} />
  </Piral>
);
render(app, document.querySelector('#app'));
```
 */
export function createInstance(config) {
    if (config === void 0) { config = {}; }
    var state = config.state, actions = config.actions, _a = config.availablePilets, availablePilets = _a === void 0 ? [] : _a, extendApi = config.extendApi, plugins = config.plugins, _b = config.requestPilets, requestPilets = _b === void 0 ? defaultModuleRequester : _b, fetchDependency = config.fetchDependency, _c = config.getDependencies, getDependencies = _c === void 0 ? getLocalDependencies : _c, loaderConfig = config.loaderConfig, _d = config.async, async = _d === void 0 ? false : _d, loadPilet = config.loadPilet, loaders = config.loaders, _e = config.apiFactory, apiFactory = _e === void 0 ? defaultApiFactory : _e;
    var globalState = createGlobalState(state);
    var events = createListener(globalState);
    var context = createActions(globalState, events);
    var definedPlugins = plugins || extendApi || [];
    var usedPlugins = Array.isArray(definedPlugins) ? definedPlugins : [definedPlugins];
    var createApi = apiFactory(context, usedPlugins);
    var root = createApi({
        name: 'root',
        version: process.env.BUILD_PCKG_VERSION || '1.0.0',
        spec: '',
    });
    var options = createPiletOptions({
        context: context,
        createApi: createApi,
        loaders: loaders,
        loadPilet: loadPilet,
        availablePilets: availablePilets,
        fetchDependency: fetchDependency,
        loaderConfig: loaderConfig,
        getDependencies: getDependencies,
        strategy: isfunc(async) ? async : async ? blazingStrategy : standardStrategy,
        requestPilets: requestPilets,
    });
    if (actions) {
        includeActions(context, actions);
    }
    context.options = options;
    return __assign(events, {
        createApi: createApi,
        context: context,
        root: root,
        options: options,
    });
}
//# sourceMappingURL=createInstance.js.map