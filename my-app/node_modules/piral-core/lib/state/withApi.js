"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withApi = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var piral_base_1 = require("piral-base");
var react_router_1 = require("react-router");
var stateContext_1 = require("./stateContext");
var components_1 = require("../components");
var hooks_1 = require("../hooks");
var utils_1 = require("../utils");
var portalIdBase = 123456;
var none = [];
var PortalRenderer = function (_a) {
    var id = _a.id;
    var children = hooks_1.useGlobalState(function (m) { return m.portals[id]; }) || none;
    return utils_1.defaultRender(children);
};
var DefaultWrapper = function (props) { return React.createElement(React.Fragment, null, props.children); };
var ForeignComponentContainer = /** @class */ (function (_super) {
    tslib_1.__extends(ForeignComponentContainer, _super);
    function ForeignComponentContainer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.setNode = function (node) {
            _this.current = node;
        };
        return _this;
    }
    ForeignComponentContainer.prototype.componentDidMount = function () {
        var node = this.current;
        var _a = this.props, $component = _a.$component, $context = _a.$context, innerProps = _a.innerProps;
        var mount = $component.mount;
        if (node && piral_base_1.isfunc(mount)) {
            mount(node, innerProps, $context);
        }
        this.previous = node;
    };
    ForeignComponentContainer.prototype.componentDidUpdate = function () {
        var _a = this, current = _a.current, previous = _a.previous;
        var _b = this.props, $component = _b.$component, $context = _b.$context, innerProps = _b.innerProps;
        var update = $component.update;
        if (current !== previous) {
            previous && this.componentWillUnmount();
            current && this.componentDidMount();
        }
        else if (piral_base_1.isfunc(update)) {
            update(current, innerProps, $context);
        }
    };
    ForeignComponentContainer.prototype.componentWillUnmount = function () {
        var node = this.previous;
        var $component = this.props.$component;
        var unmount = $component.unmount;
        if (node && piral_base_1.isfunc(unmount)) {
            unmount(node);
        }
        this.previous = undefined;
    };
    ForeignComponentContainer.prototype.render = function () {
        var $portalId = this.props.$portalId;
        return React.createElement("div", { "data-portal-id": $portalId, ref: this.setNode });
    };
    return ForeignComponentContainer;
}(React.Component));
function wrapReactComponent(Component, stasisOptions, piral, Wrapper) {
    return function (props) { return (React.createElement(Wrapper, tslib_1.__assign({}, props, { piral: piral }),
        React.createElement(components_1.ErrorBoundary, tslib_1.__assign({}, stasisOptions, { renderProps: props }),
            React.createElement(Component, tslib_1.__assign({}, props, { piral: piral }))))); };
}
function wrapForeignComponent(component, stasisOptions, piral, Wrapper) {
    return React.memo(function (props) {
        var destroyPortal = hooks_1.useActions().destroyPortal;
        var state = React.useContext(stateContext_1.StateContext).state;
        var router = React.useContext(react_router_1.__RouterContext);
        var id = React.useMemo(function () { return (portalIdBase++).toString(26); }, none);
        var context = React.useMemo(function () { return ({ router: router, state: state }); }, [router, state]);
        var innerProps = React.useMemo(function () { return (tslib_1.__assign(tslib_1.__assign({}, props), { piral: piral })); }, [props]);
        React.useEffect(function () { return function () { return destroyPortal(id); }; }, none);
        return (React.createElement(Wrapper, tslib_1.__assign({}, innerProps),
            React.createElement(components_1.ErrorBoundary, tslib_1.__assign({}, stasisOptions, { renderProps: props }),
                React.createElement(PortalRenderer, { id: id }),
                React.createElement(ForeignComponentContainer, { innerProps: innerProps, "$portalId": id, "$component": component, "$context": context }))));
    });
}
function isNotExotic(component) {
    return !component.$$typeof;
}
function wrapComponent(converters, component, piral, Wrapper, stasisOptions) {
    if (!component) {
        console.error('The given value is not a valid component.');
        // tslint:disable-next-line:no-null-keyword
        component = function () { return null; };
    }
    if (typeof component === 'object' && isNotExotic(component)) {
        var result = utils_1.convertComponent(converters[component.type], component);
        return wrapForeignComponent(result, stasisOptions, piral, Wrapper);
    }
    return wrapReactComponent(component, stasisOptions, piral, Wrapper);
}
function getWrapper(wrappers, wrapperType) {
    return wrappers[wrapperType] || wrappers['*'] || DefaultWrapper;
}
function withApi(context, component, piral, errorType, wrapperType) {
    if (wrapperType === void 0) { wrapperType = errorType; }
    var converters = context.converters;
    var Wrapper = context.readState(function (m) { return getWrapper(m.registry.wrappers, wrapperType); });
    return wrapComponent(converters, component, piral, Wrapper, {
        onError: function (error) {
            console.error(piral, error);
        },
        renderChild: function (child) {
            return React.createElement(React.Suspense, { fallback: React.createElement(components_1.PiralLoadingIndicator, null) }, child);
        },
        renderError: function (error, props) {
            return React.createElement(components_1.PiralError, tslib_1.__assign({ type: errorType, error: error }, props));
        },
    });
}
exports.withApi = withApi;
//# sourceMappingURL=withApi.js.map