"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withoutKey = exports.withKey = exports.updateKey = exports.excludeOn = exports.removeNested = exports.replaceOrAddItem = exports.includeItem = exports.excludeItem = exports.appendItems = exports.prependItems = exports.appendItem = exports.prependItem = exports.removeIndicator = void 0;
var tslib_1 = require("tslib");
// tslint:disable-next-line
exports.removeIndicator = null;
function prependItem(items, item) {
    return tslib_1.__spreadArray([item], (items || []));
}
exports.prependItem = prependItem;
function appendItem(items, item) {
    return tslib_1.__spreadArray(tslib_1.__spreadArray([], (items || [])), [item]);
}
exports.appendItem = appendItem;
function prependItems(items, newItems) {
    return tslib_1.__spreadArray(tslib_1.__spreadArray([], newItems), (items || []));
}
exports.prependItems = prependItems;
function appendItems(items, newItems) {
    return tslib_1.__spreadArray(tslib_1.__spreadArray([], (items || [])), newItems);
}
exports.appendItems = appendItems;
function excludeItem(items, item) {
    return (items || []).filter(function (m) { return m !== item; });
}
exports.excludeItem = excludeItem;
function includeItem(items, item) {
    return appendItem(excludeItem(items, item), item);
}
exports.includeItem = includeItem;
function replaceOrAddItem(items, item, predicate) {
    var newItems = tslib_1.__spreadArray([], (items || []));
    for (var i = 0; i < newItems.length; i++) {
        if (predicate(newItems[i])) {
            newItems[i] = item;
            return newItems;
        }
    }
    newItems.push(item);
    return newItems;
}
exports.replaceOrAddItem = replaceOrAddItem;
function removeNested(obj, predicate) {
    return Object.keys(obj).reduce(function (entries, key) {
        var item = obj[key];
        entries[key] = Object.keys(item).reduce(function (all, key) {
            var value = item[key];
            if (Array.isArray(value)) {
                all[key] = excludeOn(value, predicate);
            }
            else if (!value || !predicate(value)) {
                all[key] = value;
            }
            return all;
        }, {});
        return entries;
    }, {});
}
exports.removeNested = removeNested;
function excludeOn(items, predicate) {
    return (items || []).filter(function (m) { return !predicate(m); });
}
exports.excludeOn = excludeOn;
function updateKey(obj, key, value) {
    return value === exports.removeIndicator ? withoutKey(obj, key) : withKey(obj, key, value);
}
exports.updateKey = updateKey;
function withKey(obj, key, value) {
    var _a;
    return tslib_1.__assign(tslib_1.__assign({}, obj), (_a = {}, _a[key] = value, _a));
}
exports.withKey = withKey;
function withoutKey(obj, key) {
    var _a = obj || {}, _b = key, _ = _a[_b], newObj = tslib_1.__rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);
    return newObj;
}
exports.withoutKey = withoutKey;
//# sourceMappingURL=helpers.js.map