"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDebounce = void 0;
var react_1 = require("react");
/**
 * Hook that returns the debounced (i.e., delayed) value.
 * Useful when user input should not fire immediately, but rather
 * only after a certain timespan without any changes passed.
 * @param value The value to consider.
 * @param delay The timespan to pass before applying the value.
 */
function useDebounce(value, delay) {
    if (delay === void 0) { delay = 300; }
    var _a = react_1.useState(value), debouncedValue = _a[0], setDebouncedValue = _a[1];
    react_1.useEffect(function () {
        var handler = setTimeout(function () { return setDebouncedValue(value); }, delay);
        return function () { return clearTimeout(handler); };
    }, [value, delay]);
    return debouncedValue;
}
exports.useDebounce = useDebounce;
//# sourceMappingURL=debounce.js.map