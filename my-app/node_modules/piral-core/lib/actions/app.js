"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.includeProvider = exports.setRoute = exports.setErrorComponent = exports.setComponent = exports.injectPilet = exports.initialize = exports.changeLayout = void 0;
var tslib_1 = require("tslib");
var react_1 = require("react");
var utils_1 = require("../utils");
function changeLayout(ctx, current) {
    ctx.dispatch(function (state) { return (tslib_1.__assign(tslib_1.__assign({}, state), { app: utils_1.withKey(state.app, 'layout', current) })); });
}
exports.changeLayout = changeLayout;
function initialize(ctx, loading, error, modules) {
    ctx.dispatch(function (state) { return (tslib_1.__assign(tslib_1.__assign({}, state), { app: tslib_1.__assign(tslib_1.__assign({}, state.app), { error: error,
            loading: loading }), modules: modules })); });
}
exports.initialize = initialize;
function injectPilet(ctx, pilet) {
    ctx.dispatch(function (state) { return (tslib_1.__assign(tslib_1.__assign({}, state), { modules: utils_1.replaceOrAddItem(state.modules, pilet, function (m) { return m.name === pilet.name; }), registry: utils_1.removeNested(state.registry, function (m) { return m.pilet === pilet.name; }) })); });
    ctx.emit('unload-pilet', {
        name: pilet.name,
    });
}
exports.injectPilet = injectPilet;
function setComponent(ctx, name, component) {
    ctx.dispatch(function (state) { return (tslib_1.__assign(tslib_1.__assign({}, state), { components: utils_1.withKey(state.components, name, component) })); });
}
exports.setComponent = setComponent;
function setErrorComponent(ctx, type, component) {
    ctx.dispatch(function (state) { return (tslib_1.__assign(tslib_1.__assign({}, state), { errorComponents: utils_1.withKey(state.errorComponents, type, component) })); });
}
exports.setErrorComponent = setErrorComponent;
function setRoute(ctx, path, component) {
    ctx.dispatch(function (state) { return (tslib_1.__assign(tslib_1.__assign({}, state), { routes: utils_1.withKey(state.routes, path, component) })); });
}
exports.setRoute = setRoute;
function includeProvider(ctx, provider) {
    var wrapper = function (props) { return react_1.cloneElement(provider, props); };
    ctx.dispatch(function (state) { return (tslib_1.__assign(tslib_1.__assign({}, state), { provider: !state.provider ? wrapper : function (props) { return react_1.createElement(state.provider, undefined, wrapper(props)); } })); });
}
exports.includeProvider = includeProvider;
//# sourceMappingURL=app.js.map