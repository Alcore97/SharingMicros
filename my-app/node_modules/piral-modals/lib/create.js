"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createModalsApi = void 0;
var tslib_1 = require("tslib");
var actions = require("./actions");
var piral_core_1 = require("piral-core");
var default_1 = require("./default");
function getModalDialogs(dialogs) {
    var modals = {};
    for (var _i = 0, dialogs_1 = dialogs; _i < dialogs_1.length; _i++) {
        var _a = dialogs_1[_i], name_1 = _a.name, component = _a.component, defaults = _a.defaults;
        modals["global-" + name_1] = {
            pilet: undefined,
            name: name_1,
            component: component,
            defaults: defaults,
        };
    }
    return modals;
}
/**
 * Creates new Pilet API extensions for support modal dialogs.
 */
function createModalsApi(config) {
    if (config === void 0) { config = {}; }
    var _a = config.dialogs, dialogs = _a === void 0 ? [] : _a, _b = config.selectId, selectId = _b === void 0 ? function (name) { return name + "-" + ~~(Math.random() * 10000); } : _b;
    return function (context) {
        context.defineActions(actions);
        context.dispatch(function (state) { return (tslib_1.__assign(tslib_1.__assign({}, state), { components: tslib_1.__assign({ ModalsHost: default_1.DefaultHost, ModalsDialog: default_1.DefaultDialog }, state.components), registry: tslib_1.__assign(tslib_1.__assign({}, state.registry), { modals: getModalDialogs(dialogs) }), modals: [] })); });
        return function (api, target) {
            var pilet = target.name;
            return {
                showModal: function (simpleName, options) {
                    var name = piral_core_1.buildName(pilet, simpleName);
                    var dialog = {
                        id: selectId(name),
                        name: name,
                        alternative: simpleName,
                        options: options,
                        close: function () {
                            setTimeout(function () { return context.closeModal(dialog); }, 0);
                        },
                    };
                    context.openModal(dialog);
                    return dialog.close;
                },
                registerModal: function (name, arg, defaults) {
                    var id = piral_core_1.buildName(pilet, name);
                    context.registerModal(id, {
                        pilet: pilet,
                        name: name,
                        component: piral_core_1.withApi(context, arg, api, 'modal'),
                        defaults: defaults,
                    });
                    return function () { return api.unregisterModal(name); };
                },
                unregisterModal: function (name) {
                    var id = piral_core_1.buildName(pilet, name);
                    context.unregisterModal(id);
                },
            };
        };
    };
}
exports.createModalsApi = createModalsApi;
//# sourceMappingURL=create.js.map