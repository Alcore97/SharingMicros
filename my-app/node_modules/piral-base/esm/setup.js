/**
 * Sets up the given single pilet by calling the exported `setup`
 * function on the pilet with the created API.
 * @param app The pilet's evaluated content.
 * @param api The generated API for the pilet.
 */
export function setupSinglePilet(app, api) {
    try {
        var result = app.setup(api);
        if (typeof app.teardown === 'function') {
            var evtName_1 = 'unload-pilet';
            var handler_1 = function (e) {
                if (e.name === app.name) {
                    api.off(evtName_1, handler_1);
                    app.teardown(api);
                }
            };
            api.on(evtName_1, handler_1);
        }
        return result;
    }
    catch (e) {
        console.error("Error while setting up " + (app === null || app === void 0 ? void 0 : app.name) + ".", e);
    }
}
/**
 * Sets up the given multi pilet by calling the exported `setup`
 * function on the pilet with the API factory.
 * @param app The pilet's evaluated content.
 * @param apiFactory The API factory to be used in the bundle.
 */
export function setupMultiPilet(app, apiFactory) {
    try {
        return app.setup(apiFactory);
    }
    catch (e) {
        console.error("Error while setting up " + (app === null || app === void 0 ? void 0 : app.name) + ".", e);
    }
}
/**
 * Sets up the given pilet by calling the exported `setup` function
 * on the pilet.
 * @param app The pilet's evaluated content.
 * @param apiFactory The API factory to be used in the bundle.
 */
export function setupPilet(app, apiFactory) {
    if ('bundle' in app) {
        return setupMultiPilet(app, apiFactory);
    }
    else {
        return setupSinglePilet(app, apiFactory(app));
    }
}
//# sourceMappingURL=setup.js.map