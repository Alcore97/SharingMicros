import { __assign } from "tslib";
import { createActions } from './actions';
import { Localizer } from './localize';
import { DefaultPicker } from './default';
/**
 * Sets up a new localizer by using the given config.
 * @param config The configuration for the new localizer.
 */
export function setupLocalizer(config) {
    if (config === void 0) { config = {}; }
    var msgs = config.messages || {};
    var languages = Object.keys(msgs);
    var defaultLang = languages[0] || 'en';
    var computeLang = config.language;
    var usedLang = typeof computeLang === 'function' ? computeLang(languages, defaultLang, 'en') : computeLang;
    var language = usedLang || defaultLang;
    return new Localizer(msgs, language, languages.length ? languages : [language], config.fallback);
}
/**
 * Creates new Pilet API extensions for localization.
 * @param localizer The specific localizer to be used, if any.
 */
export function createLocaleApi(localizer) {
    if (localizer === void 0) { localizer = setupLocalizer(); }
    return function (context) {
        context.defineActions(createActions(localizer));
        context.dispatch(function (state) { return (__assign(__assign({}, state), { components: __assign({ LanguagesPicker: DefaultPicker }, state.components), language: {
                loading: false,
                available: localizer.languages,
                selected: localizer.language,
            } })); });
        return function (api) {
            var localTranslations = {};
            return {
                getCurrentLanguage: function (cb) {
                    var selected = context.readState(function (s) { return s.language.selected; });
                    if (cb) {
                        cb(selected);
                        var handler_1 = function (ev) {
                            cb(ev.currentLanguage);
                        };
                        api.on('select-language', handler_1);
                        return function () { return api.off('select-language', handler_1); };
                    }
                    return selected;
                },
                setTranslations: function (messages) {
                    localTranslations = messages;
                },
                getTranslations: function () {
                    return localTranslations;
                },
                translate: function (tag, variables) {
                    return localizer.localizeLocal(localTranslations, tag, variables);
                },
            };
        };
    };
}
//# sourceMappingURL=create.js.map