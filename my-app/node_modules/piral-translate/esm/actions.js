import { __assign } from "tslib";
export function createActions(localizer) {
    return {
        selectLanguage: function (ctx, selected) {
            ctx.dispatch(function (state) {
                localizer.language = selected;
                var previousLanguage = state.language.selected;
                var currentLanguage = selected;
                // emit this event *after* we changed the state container
                setTimeout(function () {
                    ctx.emit('select-language', {
                        previousLanguage: previousLanguage,
                        currentLanguage: currentLanguage,
                    });
                }, 0);
                return __assign(__assign({}, state), { language: __assign(__assign({}, state.language), { loading: selected === undefined, selected: selected }) });
            });
        },
        translate: function (_, key, variables) {
            return localizer && localizer.localizeGlobal(key, variables);
        },
        setTranslations: function (ctx, language, data) {
            localizer.messages[language] = data.global;
            for (var _i = 0, _a = data.locals; _i < _a.length; _i++) {
                var item = _a[_i];
                var api = ctx.apis[item.name];
                if (api) {
                    var translations = api.getTranslations();
                    translations[language] = item.value;
                    api.setTranslations(translations);
                }
            }
        },
        getTranslations: function (ctx, language) {
            return {
                global: localizer.messages[language],
                locals: Object.keys(ctx.apis).map(function (name) { return ({
                    name: name,
                    value: ctx.apis[name].getTranslations()[language],
                }); }),
            };
        },
    };
}
//# sourceMappingURL=actions.js.map