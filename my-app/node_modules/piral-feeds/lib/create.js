"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFeedsApi = void 0;
var tslib_1 = require("tslib");
var actions = require("./actions");
var piral_core_1 = require("piral-core");
var withFeed_1 = require("./withFeed");
var utils_1 = require("./utils");
/**
 * Creates new Pilet API extensions for supporting simplified data feed connections.
 */
function createFeedsApi(config) {
    if (config === void 0) { config = {}; }
    return function (context) {
        context.defineActions(actions);
        context.dispatch(function (state) { return (tslib_1.__assign(tslib_1.__assign({}, state), { feeds: {} })); });
        return function (_, target) {
            var feeds = 0;
            return {
                createConnector: function (resolver) {
                    var id = piral_core_1.buildName(target.name, feeds++);
                    var options = utils_1.createFeedOptions(id, resolver);
                    var invalidate = function () {
                        var _a;
                        (_a = options.dispose) === null || _a === void 0 ? void 0 : _a.call(options);
                        context.createFeed(options.id);
                    };
                    if (options.immediately) {
                        context.loadFeed(options);
                    }
                    else {
                        invalidate();
                    }
                    var connect = (function (component) { return withFeed_1.withFeed(component, options); });
                    Object.keys(options.reducers).forEach(function (type) {
                        var reducer = options.reducers[type];
                        if (typeof reducer === 'function') {
                            connect[type] = function () {
                                var args = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    args[_i] = arguments[_i];
                                }
                                context.updateFeed(id, args, function (data, item) { return reducer.call.apply(reducer, tslib_1.__spreadArray([connect, data], item)); });
                            };
                        }
                    });
                    connect.invalidate = invalidate;
                    return connect;
                },
            };
        };
    };
}
exports.createFeedsApi = createFeedsApi;
//# sourceMappingURL=create.js.map