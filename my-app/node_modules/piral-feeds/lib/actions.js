"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateFeed = exports.loadedFeed = exports.loadFeed = exports.destroyFeed = exports.createFeed = void 0;
var tslib_1 = require("tslib");
var piral_core_1 = require("piral-core");
function createFeed(ctx, id) {
    ctx.dispatch(function (state) { return (tslib_1.__assign(tslib_1.__assign({}, state), { feeds: piral_core_1.withKey(state.feeds, id, {
            data: undefined,
            error: undefined,
            loaded: false,
            loading: false,
        }) })); });
}
exports.createFeed = createFeed;
function destroyFeed(ctx, id) {
    ctx.dispatch(function (state) { return (tslib_1.__assign(tslib_1.__assign({}, state), { feeds: piral_core_1.withoutKey(state.feeds, id) })); });
}
exports.destroyFeed = destroyFeed;
function loadFeed(ctx, options) {
    var id = options.id;
    ctx.dispatch(function (state) { return (tslib_1.__assign(tslib_1.__assign({}, state), { feeds: piral_core_1.withKey(state.feeds, id, {
            data: undefined,
            error: undefined,
            loaded: false,
            loading: true,
        }) })); });
    return options.initialize().then(function (baseData) {
        loadedFeed(ctx, id, baseData, undefined);
        options.dispose = options.connect(function (item) {
            updateFeed(ctx, id, item, options.update);
        });
    }, function (err) { return loadedFeed(ctx, id, undefined, err); });
}
exports.loadFeed = loadFeed;
function loadedFeed(ctx, id, data, error) {
    ctx.dispatch(function (state) { return (tslib_1.__assign(tslib_1.__assign({}, state), { feeds: piral_core_1.withKey(state.feeds, id, {
            loading: false,
            loaded: true,
            error: error,
            data: data,
        }) })); });
}
exports.loadedFeed = loadedFeed;
function updateFeed(ctx, id, item, reducer) {
    var feed = ctx.readState(function (state) { return state.feeds[id]; });
    var result = reducer(feed.data, item);
    if (result instanceof Promise) {
        return result
            .then(function (data) { return loadedFeed(ctx, id, data, undefined); })
            .catch(function (error) { return loadedFeed(ctx, id, undefined, error); });
    }
    else if (result !== feed.data) {
        loadedFeed(ctx, id, result, undefined);
    }
}
exports.updateFeed = updateFeed;
//# sourceMappingURL=actions.js.map