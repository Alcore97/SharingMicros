import { __assign } from "tslib";
import { withKey, withoutKey } from 'piral-core';
export function createFeed(ctx, id) {
    ctx.dispatch(function (state) { return (__assign(__assign({}, state), { feeds: withKey(state.feeds, id, {
            data: undefined,
            error: undefined,
            loaded: false,
            loading: false,
        }) })); });
}
export function destroyFeed(ctx, id) {
    ctx.dispatch(function (state) { return (__assign(__assign({}, state), { feeds: withoutKey(state.feeds, id) })); });
}
export function loadFeed(ctx, options) {
    var id = options.id;
    ctx.dispatch(function (state) { return (__assign(__assign({}, state), { feeds: withKey(state.feeds, id, {
            data: undefined,
            error: undefined,
            loaded: false,
            loading: true,
        }) })); });
    return options.initialize().then(function (baseData) {
        loadedFeed(ctx, id, baseData, undefined);
        options.dispose = options.connect(function (item) {
            updateFeed(ctx, id, item, options.update);
        });
    }, function (err) { return loadedFeed(ctx, id, undefined, err); });
}
export function loadedFeed(ctx, id, data, error) {
    ctx.dispatch(function (state) { return (__assign(__assign({}, state), { feeds: withKey(state.feeds, id, {
            loading: false,
            loaded: true,
            error: error,
            data: data,
        }) })); });
}
export function updateFeed(ctx, id, item, reducer) {
    var feed = ctx.readState(function (state) { return state.feeds[id]; });
    var result = reducer(feed.data, item);
    if (result instanceof Promise) {
        return result
            .then(function (data) { return loadedFeed(ctx, id, data, undefined); })
            .catch(function (error) { return loadedFeed(ctx, id, undefined, error); });
    }
    else if (result !== feed.data) {
        loadedFeed(ctx, id, result, undefined);
    }
}
//# sourceMappingURL=actions.js.map