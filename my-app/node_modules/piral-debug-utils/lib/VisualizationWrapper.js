"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VisualizationWrapper = void 0;
const React = require("react");
const react_router_dom_1 = require("react-router-dom");
const piral_core_1 = require("piral-core");
const moduleColor = {};
const Visualizer = ({ pilet, force, active }) => {
    const colors = [
        '#001F3F',
        '#0074D9',
        '#7FDBFF',
        '#39CCCC',
        '#3D9970',
        '#2ECC40',
        '#01FF70',
        '#FFDC00',
        '#FF851B',
        '#FF4136',
        '#85144B',
        '#F012BE',
        '#B10DC9',
    ];
    const location = react_router_dom_1.useLocation();
    const container = React.useRef();
    const color = React.useMemo(() => moduleColor[pilet] || (moduleColor[pilet] = colors[Object.keys(moduleColor).length % colors.length]), [pilet]);
    React.useEffect(() => {
        let sibling = container.current && container.current.nextElementSibling;
        if (sibling && active) {
            const style = container.current.style;
            const target = container.current.parentNode;
            const mouseIn = () => {
                style.display = 'block';
                style.left = '0px';
                style.top = '0px';
                style.bottom = '0px';
                style.right = '0px';
                const targetRect = sibling.getBoundingClientRect();
                const sourceRect = container.current.getBoundingClientRect();
                style.left = targetRect.left - sourceRect.left + 'px';
                style.top = targetRect.top - sourceRect.top + 'px';
                style.bottom = -(targetRect.bottom - sourceRect.bottom) + 'px';
                style.right = -(targetRect.right - sourceRect.right) + 'px';
            };
            const mouseOut = () => {
                style.display = 'none';
            };
            const append = () => {
                if (!force) {
                    sibling.addEventListener('mouseover', mouseIn);
                    sibling.addEventListener('mouseout', mouseOut);
                }
                else {
                    mouseIn();
                }
            };
            const remove = () => {
                if (!force) {
                    sibling.removeEventListener('mouseover', mouseIn);
                    sibling.removeEventListener('mouseout', mouseOut);
                }
                else {
                    mouseOut();
                }
            };
            const observer = new MutationObserver(() => {
                const newSibling = container.current.nextElementSibling;
                if (newSibling !== sibling) {
                    remove();
                    sibling = newSibling;
                    append();
                }
            });
            append();
            observer.observe(target, { childList: true });
            return () => {
                remove();
                observer.disconnect();
            };
        }
    }, [location.key, active, force]);
    if (active) {
        const rect = {
            border: '1px solid red',
            display: 'none',
            position: 'absolute',
            top: 0,
            bottom: 0,
            right: 0,
            left: 0,
            zIndex: 99999999999,
            pointerEvents: 'none',
            borderColor: color,
        };
        const info = {
            color: 'white',
            position: 'absolute',
            right: 0,
            top: 0,
            fontSize: '8px',
            background: color,
        };
        return (React.createElement("div", { style: rect, ref: container },
            React.createElement("div", { style: info }, pilet)));
    }
    // tslint:disable-next-line:no-null-keyword
    return null;
};
const VisualizationWrapper = ({ piral, children }) => {
    const { active, force } = piral_core_1.useGlobalState((m) => m.$debug.visualize);
    return (React.createElement(React.Fragment, null,
        React.createElement(Visualizer, { pilet: piral.meta.name, force: force, active: active }),
        children));
};
exports.VisualizationWrapper = VisualizationWrapper;
//# sourceMappingURL=VisualizationWrapper.js.map