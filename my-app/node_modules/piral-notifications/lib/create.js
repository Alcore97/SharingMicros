"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNotificationsApi = void 0;
var tslib_1 = require("tslib");
var actions = require("./actions");
var react_1 = require("react");
var piral_core_1 = require("piral-core");
var default_1 = require("./default");
function isElement(element) {
    return react_1.isValidElement(element);
}
function toComponent(component) {
    if (typeof component === 'string') {
        var text_1 = component;
        return function () { return piral_core_1.defaultRender(text_1); };
    }
    else if (react_1.isValidElement(component)) {
        var element_1 = component;
        return function () { return element_1; };
    }
    return component;
}
function createNotification(context, id, content, defaultOptions, customOptions) {
    if (customOptions === void 0) { customOptions = {}; }
    var options = tslib_1.__assign(tslib_1.__assign({}, defaultOptions), customOptions);
    var notification = {
        id: id,
        component: toComponent(content),
        options: options,
        close: function () {
            setTimeout(function () { return context.closeNotification(notification); }, 0);
        },
    };
    if (typeof options.autoClose === 'number' && options.autoClose > 0) {
        setTimeout(notification.close, options.autoClose);
    }
    return notification;
}
function getNotifications(context, messages, defaultOptions) {
    var notifications = [];
    var i = 0;
    for (var _i = 0, messages_1 = messages; _i < messages_1.length; _i++) {
        var _a = messages_1[_i], content = _a.content, options = _a.options;
        notifications.push(createNotification(context, "global-" + i++, content, defaultOptions, options));
    }
    return notifications;
}
/**
 * Creates new Pilet API extensions for showing notifications.
 */
function createNotificationsApi(config) {
    if (config === void 0) { config = {}; }
    var _a = config.defaultOptions, defaultOptions = _a === void 0 ? {} : _a, _b = config.selectId, selectId = _b === void 0 ? function () { return "" + ~~(Math.random() * 10000); } : _b, _c = config.messages, messages = _c === void 0 ? [] : _c;
    return function (context) {
        context.defineActions(actions);
        context.dispatch(function (state) { return (tslib_1.__assign(tslib_1.__assign({}, state), { components: tslib_1.__assign({ NotificationsHost: default_1.DefaultHost, NotificationsToast: default_1.DefaultToast }, state.components), notifications: getNotifications(context, messages, defaultOptions) })); });
        return function (api) { return ({
            showNotification: function (content, customOptions) {
                var Component = typeof content === 'string'
                    ? content
                    : isElement(content)
                        ? content
                        : piral_core_1.withApi(context, content, api, 'extension');
                var notification = createNotification(context, selectId(), Component, defaultOptions, customOptions);
                context.openNotification(notification);
                return notification.close;
            },
        }); };
    };
}
exports.createNotificationsApi = createNotificationsApi;
//# sourceMappingURL=create.js.map