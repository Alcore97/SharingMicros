export declare const EVENTS = "__events__";
export declare const SHARED = "__shared__";
export declare const OBSERVERS = "__observers__";
export declare type EventsArray<T = any> = Array<T>;
export declare type Observer<T = any> = (data: T | Array<T> | undefined) => void;
export declare type ObserversArray<T = any> = Array<Observer<T>>;
declare global {
    interface Window {
        __shared__: {
            __events__: Record<string, EventsArray>;
            __observers__: Record<string, ObserversArray>;
        };
    }
}
export interface SubscriptionOptions {
    every?: boolean;
    latest?: boolean;
}
export declare class Observable<T = any> {
    _namespace: string;
    private static initialize;
    constructor(namespace: string);
    private get events();
    private set events(value);
    private get observers();
    private set observers(value);
    set namespace(namespace: string);
    publish(data: T): void;
    dispatch: (data: T) => void;
    subscribe(observer: Observer<T>, options?: SubscriptionOptions): void;
    unsubscribe(observer: Observer<T>): void;
    clear(): void;
}
