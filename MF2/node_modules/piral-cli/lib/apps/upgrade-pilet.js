"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.upgradePilet = exports.upgradePiletDefaults = void 0;
const path_1 = require("path");
const types_1 = require("../types");
const common_1 = require("../common");
exports.upgradePiletDefaults = {
    version: undefined,
    target: '.',
    forceOverwrite: common_1.ForceOverwrite.no,
    logLevel: types_1.LogLevels.info,
    install: true,
    npmClient: undefined,
};
function upgradePilet(baseDir = process.cwd(), options = {}) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const { version = exports.upgradePiletDefaults.version, target = exports.upgradePiletDefaults.target, forceOverwrite = exports.upgradePiletDefaults.forceOverwrite, logLevel = exports.upgradePiletDefaults.logLevel, install = exports.upgradePiletDefaults.install, } = options;
        common_1.setLogLevel(logLevel);
        const root = path_1.resolve(baseDir, target);
        const valid = yield common_1.checkExistingDirectory(root);
        if (!valid) {
            common_1.fail('invalidPiletTarget_0040');
        }
        const npmClient = yield common_1.determineNpmClient(root, options.npmClient);
        const pckg = yield common_1.readJson(root, 'package.json');
        const { devDependencies = {}, dependencies = {}, piral } = pckg;
        if (piral && typeof piral === 'object') {
            const sourceName = piral.name;
            if (!sourceName || typeof sourceName !== 'string') {
                common_1.fail('invalidPiletPackage_0042');
            }
            const currentVersion = (_a = devDependencies[sourceName]) !== null && _a !== void 0 ? _a : dependencies[sourceName];
            if (!currentVersion || typeof currentVersion !== 'string') {
                common_1.fail('invalidPiralReference_0043');
            }
            const monorepoRef = yield common_1.isMonorepoPackageRef(sourceName, baseDir);
            const [packageRef, packageVersion] = yield common_1.getCurrentPackageDetails(baseDir, sourceName, currentVersion, version, root);
            const originalFiles = yield common_1.getFileStats(root, sourceName);
            if (!monorepoRef) {
                // only install the latest if the shell does come from remote
                common_1.progress(`Updating NPM package to %s ...`, packageRef);
                yield common_1.installPackage(npmClient, packageRef, root, '--no-save');
            }
            const piralInfo = yield common_1.readPiralPackage(root, sourceName);
            const isEmulator = common_1.checkAppShellPackage(piralInfo);
            const { preUpgrade, postUpgrade, files } = common_1.getPiletsInfo(piralInfo);
            if (preUpgrade) {
                common_1.progress(`Running preUpgrade script ...`);
                common_1.log('generalDebug_0003', `Run: ${preUpgrade}`);
                yield common_1.runScript(preUpgrade, root);
            }
            common_1.progress(`Taking care of templating ...`);
            if (isEmulator) {
                // in the emulator case we get the files from the contained tarball
                yield common_1.copyPiralFiles(root, sourceName, piralInfo, forceOverwrite, originalFiles);
            }
            else {
                // otherwise, we perform the same action as in the emulator creation
                // just with a different target; not a created directory, but the root
                const packageRoot = common_1.getPiralPath(root, sourceName);
                const notOnceFiles = files.filter((m) => typeof m === 'string' || !m.once);
                yield common_1.copyScaffoldingFiles(packageRoot, root, notOnceFiles, piralInfo);
            }
            yield common_1.patchPiletPackage(root, sourceName, packageVersion, piralInfo);
            if (install) {
                common_1.progress(`Updating dependencies ...`);
                const monorepoKind = yield common_1.detectMonorepo(root);
                if (monorepoKind === 'lerna') {
                    yield common_1.bootstrapMonorepo(root);
                }
                else {
                    yield common_1.installDependencies(npmClient, root);
                }
            }
            if (postUpgrade) {
                common_1.progress(`Running postUpgrade script ...`);
                common_1.log('generalDebug_0003', `Run: ${postUpgrade}`);
                yield common_1.runScript(postUpgrade, root);
            }
            common_1.logDone('Pilet upgraded successfully!');
        }
        else {
            common_1.fail('invalidPiletPackage_0041');
        }
    });
}
exports.upgradePilet = upgradePilet;
//# sourceMappingURL=upgrade-pilet.js.map