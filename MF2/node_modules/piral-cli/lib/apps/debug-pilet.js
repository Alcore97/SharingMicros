"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.debugPilet = exports.debugPiletDefaults = void 0;
const path_1 = require("path");
const kras_1 = require("kras");
const bundler_1 = require("../bundler");
const types_1 = require("../types");
const common_1 = require("../common");
exports.debugPiletDefaults = {
    logLevel: types_1.LogLevels.info,
    entry: './src/index',
    open: false,
    port: 1234,
    hmr: true,
    optimizeModules: false,
    schemaVersion: 'v1',
};
const injectorName = path_1.resolve(__dirname, '../injectors/pilet.js');
function getOrMakeAppDir({ emulator, piral, externals, appFile }, logLevel) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!emulator) {
            const packageJson = require.resolve(`${piral}/package.json`);
            const cwd = path_1.resolve(packageJson, '..');
            const { dir } = yield bundler_1.callDebugPiralFromMonoRepo({
                root: cwd,
                optimizeModules: false,
                ignored: [],
                externals,
                piral,
                entryFiles: appFile,
                logLevel,
                _: {},
            });
            return dir;
        }
        return path_1.dirname(appFile);
    });
}
function checkSanity(pilets) {
    for (let i = 1; i < pilets.length; i++) {
        const previous = pilets[i - 1];
        const current = pilets[i];
        if (previous.piral !== current.piral) {
            return common_1.log('piletMultiDebugAppShellDifferent_0301', previous.piral, current.piral);
        }
        else if (previous.appVersion !== current.appVersion) {
            return common_1.log('piletMultiDebugAppShellVersions_0302', previous.appVersion, current.appVersion);
        }
        else if (previous.externals.length !== current.externals.length) {
            return common_1.log('piletMultiDebugExternalsDifferent_0303', previous.externals, current.externals);
        }
        else if (previous.externals.some((m) => !current.externals.includes(m))) {
            return common_1.log('piletMultiDebugExternalsDifferent_0303', previous.externals, current.externals);
        }
    }
}
function debugPilet(baseDir = process.cwd(), options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { entry = exports.debugPiletDefaults.entry, port = exports.debugPiletDefaults.port, open = exports.debugPiletDefaults.open, hmr = exports.debugPiletDefaults.hmr, logLevel = exports.debugPiletDefaults.logLevel, optimizeModules = exports.debugPiletDefaults.optimizeModules, schemaVersion = exports.debugPiletDefaults.schemaVersion, _ = {}, bundlerName, app, feed, } = options;
        common_1.setLogLevel(logLevel);
        common_1.progress('Reading configuration ...');
        const krasConfig = kras_1.readKrasConfig({ port }, kras_1.krasrc);
        const api = common_1.config.piletApi;
        const entryList = Array.isArray(entry) ? entry : [entry];
        const multi = entryList.length > 1 || entryList[0].indexOf('*') !== -1;
        common_1.log('generalDebug_0003', `Looking for (${multi ? 'multi' : 'single'}) "${entryList.join('", "')}" in "${baseDir}".`);
        const allEntries = yield common_1.matchAnyPilet(baseDir, entryList);
        common_1.log('generalDebug_0003', `Found the following entries: ${allEntries.join(', ')}`);
        if (krasConfig.sources === undefined) {
            krasConfig.sources = [];
        }
        if (allEntries.length === 0) {
            common_1.fail('entryFileMissing_0077');
        }
        const pilets = yield Promise.all(allEntries.map((entryModule) => __awaiter(this, void 0, void 0, function* () {
            const targetDir = path_1.dirname(entryModule);
            const { peerDependencies, peerModules, root, appPackage, appFile, ignored, emulator } = yield common_1.retrievePiletData(targetDir, app);
            const externals = [...Object.keys(peerDependencies), ...peerModules];
            const mocks = path_1.join(targetDir, 'mocks');
            const exists = yield common_1.checkExistingDirectory(mocks);
            if (exists) {
                if (krasConfig.directory === undefined) {
                    krasConfig.directory = mocks;
                }
                krasConfig.sources.push(mocks);
            }
            const bundler = yield bundler_1.callPiletDebug({
                root,
                piral: appPackage.name,
                optimizeModules,
                hmr,
                externals,
                targetDir,
                entryModule: `./${path_1.relative(root, entryModule)}`,
                logLevel,
                version: schemaVersion,
                ignored,
                _,
            }, bundlerName);
            return {
                emulator,
                appFile,
                appVersion: appPackage.version,
                externals,
                piral: appPackage.name,
                bundler,
                root,
            };
        })));
        // sanity check see #250
        checkSanity(pilets);
        const appDir = yield getOrMakeAppDir(pilets[0], logLevel);
        if (krasConfig.ssl === undefined) {
            krasConfig.ssl = undefined;
        }
        if (krasConfig.map === undefined) {
            krasConfig.map = {};
        }
        if (krasConfig.api === undefined) {
            krasConfig.api = '/manage-mock-server';
        }
        if (krasConfig.injectors === undefined) {
            krasConfig.injectors = kras_1.defaultConfig.injectors;
        }
        const injectorConfig = {
            active: true,
            pilets,
            app: appDir,
            handle: ['/', api],
            api,
            feed,
        };
        krasConfig.map['/'] = '';
        krasConfig.map[api] = '';
        krasConfig.injectors = common_1.reorderInjectors(injectorName, injectorConfig, krasConfig.injectors);
        common_1.log('generalVerbose_0004', `Using kras with configuration: ${JSON.stringify(krasConfig, undefined, 2)}`);
        const krasServer = kras_1.buildKrasWithCli(krasConfig);
        krasServer.removeAllListeners('open');
        krasServer.on('open', common_1.notifyServerOnline(pilets.map((p) => p.bundler), krasConfig.api));
        yield krasServer.start();
        common_1.openBrowser(open, port);
        yield new Promise((resolve) => krasServer.on('close', resolve));
    });
}
exports.debugPilet = debugPilet;
//# sourceMappingURL=debug-pilet.js.map