"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.packPilet = exports.packPiletDefaults = void 0;
const common_1 = require("../common");
const types_1 = require("../types");
exports.packPiletDefaults = {
    /**
     * Sets the source directory for creating the NPM package.
     */
    source: '.',
    /**
     * Sets the target directory for storing the tarball.
     */
    target: '.',
    /**
     * Sets the log level to use (1-5).
     */
    logLevel: types_1.LogLevels.info,
};
function packPilet(baseDir = process.cwd(), options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { source = exports.packPiletDefaults.source, target = exports.packPiletDefaults.target, logLevel = exports.packPiletDefaults.logLevel, } = options;
        common_1.setLogLevel(logLevel);
        common_1.progress('Reading configuration ...');
        yield common_1.createPiletPackage(baseDir, source, target);
        common_1.logDone(`Pilet packed successfully!`);
    });
}
exports.packPilet = packPilet;
//# sourceMappingURL=pack-pilet.js.map