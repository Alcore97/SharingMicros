"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newPilet = exports.newPiletDefaults = void 0;
const path_1 = require("path");
const types_1 = require("../types");
const common_1 = require("../common");
exports.newPiletDefaults = {
    target: '.',
    registry: common_1.defaultRegistry,
    source: 'piral',
    forceOverwrite: common_1.ForceOverwrite.no,
    language: common_1.SourceLanguage.ts,
    install: true,
    template: 'default',
    logLevel: types_1.LogLevels.info,
    npmClient: undefined,
    bundlerName: 'none',
    variables: {},
};
function newPilet(baseDir = process.cwd(), options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { target = exports.newPiletDefaults.target, registry = exports.newPiletDefaults.registry, source = exports.newPiletDefaults.source, forceOverwrite = exports.newPiletDefaults.forceOverwrite, language = exports.newPiletDefaults.language, install = exports.newPiletDefaults.install, template = exports.newPiletDefaults.template, logLevel = exports.newPiletDefaults.logLevel, bundlerName = exports.newPiletDefaults.bundlerName, variables = exports.newPiletDefaults.variables, } = options;
        common_1.setLogLevel(logLevel);
        common_1.progress('Preparing source and target ...');
        const root = path_1.resolve(baseDir, target);
        const [sourceName, sourceVersion, hadVersion, type] = yield common_1.dissectPackageName(baseDir, source);
        const success = yield common_1.createDirectory(root);
        if (success) {
            const npmClient = yield common_1.determineNpmClient(root, options.npmClient);
            common_1.progress(`Scaffolding new pilet in %s ...`, root);
            yield common_1.createFileIfNotExists(root, 'package.json', JSON.stringify({
                name: path_1.basename(root),
                version: '1.0.0',
                description: '',
                keywords: ['pilet'],
                dependencies: {},
                devDependencies: {},
                peerDependencies: {},
                scripts: {},
                main: 'dist/index.js',
                files: ['dist'],
            }, undefined, 2));
            if (registry !== exports.newPiletDefaults.registry) {
                common_1.progress(`Setting up NPM registry (%s) ...`, registry);
                yield common_1.createFileIfNotExists(root, '.npmrc', `registry=${registry}
always-auth=true`, forceOverwrite);
            }
            const isLocal = common_1.isLinkedPackage(sourceName, type, hadVersion);
            if (!isLocal) {
                const packageRef = common_1.combinePackageRef(sourceName, sourceVersion, type);
                common_1.progress(`Installing NPM package %s ...`, packageRef);
                yield common_1.installPackage(npmClient, packageRef, root, '--save-dev');
            }
            else {
                common_1.progress(`Using locally available NPM package %s ...`, sourceName);
            }
            const packageName = yield common_1.getPackageName(root, sourceName, type);
            const packageVersion = common_1.getPackageVersion(hadVersion, sourceName, sourceVersion, type, root);
            const piralInfo = yield common_1.readPiralPackage(root, packageName);
            const isEmulator = common_1.checkAppShellPackage(piralInfo);
            const { preScaffold, postScaffold, files } = common_1.getPiletsInfo(piralInfo);
            if (preScaffold) {
                common_1.progress(`Running preScaffold script ...`);
                common_1.log('generalDebug_0003', `Run: ${preScaffold}`);
                yield common_1.runScript(preScaffold, root);
            }
            common_1.progress(`Taking care of templating ...`);
            yield common_1.scaffoldPiletSourceFiles(template, registry, language, root, packageName, forceOverwrite, variables);
            if (isEmulator) {
                // in the emulator case we get the files (and files_once) from the contained tarballs
                yield common_1.copyPiralFiles(root, packageName, piralInfo, common_1.ForceOverwrite.yes);
            }
            else {
                // otherwise, we perform the same action as in the emulator creation
                // just with a different target; not a created directory, but the root
                const packageRoot = common_1.getPiralPath(root, packageName);
                yield common_1.copyScaffoldingFiles(packageRoot, root, files, piralInfo);
            }
            yield common_1.patchPiletPackage(root, packageName, packageVersion, piralInfo, { language, bundler: bundlerName });
            if (install) {
                common_1.progress(`Installing dependencies ...`);
                const monorepoKind = yield common_1.detectMonorepo(root);
                if (monorepoKind === 'lerna') {
                    yield common_1.bootstrapMonorepo(root);
                }
                else {
                    yield common_1.installDependencies(npmClient, root);
                }
            }
            if (postScaffold) {
                common_1.progress(`Running postScaffold script ...`);
                common_1.log('generalDebug_0003', `Run: ${postScaffold}`);
                yield common_1.runScript(postScaffold, root);
            }
            common_1.logDone(`Pilet scaffolded successfully!`);
        }
        else {
            common_1.fail('cannotCreateDirectory_0044');
        }
    });
}
exports.newPilet = newPilet;
//# sourceMappingURL=new-pilet.js.map