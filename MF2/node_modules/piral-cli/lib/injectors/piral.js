"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_1 = require("fs");
const external_1 = require("../external");
/**
 * The maximum amount of retries when sending a response
 */
const maxRetrySendResponse = 4;
class PiralInjector {
    constructor(options) {
        this.config = options;
    }
    get active() {
        return this.config.active;
    }
    set active(value) {
        this.config.active = value;
    }
    get name() {
        return 'piral-injector';
    }
    getOptions() {
        return {};
    }
    setOptions() { }
    sendResponse(path, target, dir, url, recursionDepth = 0) {
        var _a;
        if (recursionDepth > maxRetrySendResponse) {
            return undefined;
        }
        if (!path || !fs_1.existsSync(target) || !fs_1.statSync(target).isFile()) {
            const { bundler } = this.config;
            const newTarget = path_1.join(bundler.bundle.dir, bundler.bundle.name);
            return this.sendResponse(bundler.bundle.name, newTarget, dir, url, recursionDepth + 1);
        }
        const type = (_a = external_1.mime.getType(target)) !== null && _a !== void 0 ? _a : 'application/octet-stream';
        return {
            injector: { name: this.name },
            headers: {
                'content-type': type,
                'cache-control': 'no-cache, no-store, must-revalidate',
                pragma: 'no-cache',
                expires: '0',
            },
            status: { code: 200 },
            url,
            content: fs_1.readFileSync(target),
        };
    }
    handle(req) {
        if (!req.target) {
            const { bundler } = this.config;
            const path = req.url.substr(1);
            const dir = bundler.bundle.dir;
            const target = path_1.join(dir, path.split('?')[0]);
            return bundler.ready().then(() => this.sendResponse(path, target, dir, req.url));
        }
    }
}
exports.default = PiralInjector;
//# sourceMappingURL=piral.js.map